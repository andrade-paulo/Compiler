Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ALL
    BEQ
    BIG
    ID
    LBRACKET
    LCURLY
    LEQ
    LESS
    NAMESPACE
    RBRACKET
    RCURLY

Grammar

Rule 0     S' -> ontology
Rule 1     ontology -> primitive_class_header
Rule 2     ontology -> primitive_class_header ontology
Rule 3     ontology -> defined_class_header
Rule 4     ontology -> defined_class_header ontology
Rule 5     primitive_class_header -> CLASS CLASS_NAME SUBCLASS subclass_header
Rule 6     primitive_class_header -> CLASS CLASS_NAME SUBCLASS subclass_header class_expression
Rule 7     defined_class_header -> CLASS CLASS_NAME EQUIVALENT equivalent_expression
Rule 8     defined_class_header -> CLASS CLASS_NAME EQUIVALENT equivalent_expression SUBCLASS subclass_header
Rule 9     defined_class_header -> CLASS CLASS_NAME EQUIVALENT equivalent_expression class_expression
Rule 10    defined_class_header -> CLASS CLASS_NAME EQUIVALENT equivalent_expression SUBCLASS subclass_header class_expression
Rule 11    defined_class_header -> CLASS CLASS_NAME SUBCLASS subclass_header EQUIVALENT equivalent_expression
Rule 12    defined_class_header -> CLASS CLASS_NAME SUBCLASS subclass_header EQUIVALENT equivalent_expression class_expression
Rule 13    class_expression -> DISJOINT disjoint_expression INDIVIDUALS individuals_expression
Rule 14    class_expression -> DISJOINT disjoint_expression
Rule 15    class_expression -> INDIVIDUALS individuals_expression
Rule 16    equivalent_expression -> CLASS_NAME
Rule 17    equivalent_expression -> CLASS_NAME COMMA equivalent_expression
Rule 18    subclass_header -> CLASS_NAME
Rule 19    subclass_header -> CLASS_NAME COMMA subclass_expression
Rule 20    subclass_expression -> PROPRIETY SOME CLASS_NAME
Rule 21    subclass_expression -> PROPRIETY SOME CLASS_NAME COMMA subclass_expression
Rule 22    subclass_expression -> LPAR PROPRIETY SOME CLASS_NAME RPAR
Rule 23    subclass_expression -> LPAR PROPRIETY SOME CLASS_NAME RPAR LOGICAL subclass_expression
Rule 24    subclass_expression -> PROPRIETY QUANTIFIER NUMBER CLASS_NAME
Rule 25    subclass_expression -> PROPRIETY QUANTIFIER NUMBER CLASS_NAME COMMA subclass_expression
Rule 26    subclass_expression -> LPAR PROPRIETY QUANTIFIER NUMBER CLASS_NAME RPAR
Rule 27    subclass_expression -> LPAR PROPRIETY QUANTIFIER NUMBER CLASS_NAME RPAR LOGICAL subclass_expression
Rule 28    subclass_expression -> PROPRIETY ONLY CLASS_NAME
Rule 29    subclass_expression -> PROPRIETY ONLY LPAR closure_classes RPAR
Rule 30    closure_classes -> CLASS_NAME
Rule 31    closure_classes -> CLASS_NAME LOGICAL closure_classes
Rule 32    closure_classes -> CLASS_NAME COMMA closure_classes
Rule 33    disjoint_expression -> CLASS_NAME
Rule 34    disjoint_expression -> CLASS_NAME COMMA disjoint_expression
Rule 35    individuals_expression -> INDIVIDUAL_NAME
Rule 36    individuals_expression -> INDIVIDUAL_NAME COMMA individuals_expression

Terminals, with rules where they appear

ALL                  : 
BEQ                  : 
BIG                  : 
CLASS                : 5 6 7 8 9 10 11 12
CLASS_NAME           : 5 6 7 8 9 10 11 12 16 17 18 19 20 21 22 23 24 25 26 27 28 30 31 32 33 34
COMMA                : 17 19 21 25 32 34 36
DISJOINT             : 13 14
EQUIVALENT           : 7 8 9 10 11 12
ID                   : 
INDIVIDUALS          : 13 15
INDIVIDUAL_NAME      : 35 36
LBRACKET             : 
LCURLY               : 
LEQ                  : 
LESS                 : 
LOGICAL              : 23 27 31
LPAR                 : 22 23 26 27 29
NAMESPACE            : 
NUMBER               : 24 25 26 27
ONLY                 : 28 29
PROPRIETY            : 20 21 22 23 24 25 26 27 28 29
QUANTIFIER           : 24 25 26 27
RBRACKET             : 
RCURLY               : 
RPAR                 : 22 23 26 27 29
SOME                 : 20 21 22 23
SUBCLASS             : 5 6 8 10 11 12
error                : 

Nonterminals, with rules where they appear

class_expression     : 6 9 10 12
closure_classes      : 29 31 32
defined_class_header : 3 4
disjoint_expression  : 13 14 34
equivalent_expression : 7 8 9 10 11 12 17
individuals_expression : 13 15 36
ontology             : 2 4 0
primitive_class_header : 1 2
subclass_expression  : 19 21 23 25 27
subclass_header      : 5 6 8 10 11 12

Parsing method: LALR

state 0

    (0) S' -> . ontology
    (1) ontology -> . primitive_class_header
    (2) ontology -> . primitive_class_header ontology
    (3) ontology -> . defined_class_header
    (4) ontology -> . defined_class_header ontology
    (5) primitive_class_header -> . CLASS CLASS_NAME SUBCLASS subclass_header
    (6) primitive_class_header -> . CLASS CLASS_NAME SUBCLASS subclass_header class_expression
    (7) defined_class_header -> . CLASS CLASS_NAME EQUIVALENT equivalent_expression
    (8) defined_class_header -> . CLASS CLASS_NAME EQUIVALENT equivalent_expression SUBCLASS subclass_header
    (9) defined_class_header -> . CLASS CLASS_NAME EQUIVALENT equivalent_expression class_expression
    (10) defined_class_header -> . CLASS CLASS_NAME EQUIVALENT equivalent_expression SUBCLASS subclass_header class_expression
    (11) defined_class_header -> . CLASS CLASS_NAME SUBCLASS subclass_header EQUIVALENT equivalent_expression
    (12) defined_class_header -> . CLASS CLASS_NAME SUBCLASS subclass_header EQUIVALENT equivalent_expression class_expression

    CLASS           shift and go to state 4

    ontology                       shift and go to state 1
    primitive_class_header         shift and go to state 2
    defined_class_header           shift and go to state 3

state 1

    (0) S' -> ontology .



state 2

    (1) ontology -> primitive_class_header .
    (2) ontology -> primitive_class_header . ontology
    (1) ontology -> . primitive_class_header
    (2) ontology -> . primitive_class_header ontology
    (3) ontology -> . defined_class_header
    (4) ontology -> . defined_class_header ontology
    (5) primitive_class_header -> . CLASS CLASS_NAME SUBCLASS subclass_header
    (6) primitive_class_header -> . CLASS CLASS_NAME SUBCLASS subclass_header class_expression
    (7) defined_class_header -> . CLASS CLASS_NAME EQUIVALENT equivalent_expression
    (8) defined_class_header -> . CLASS CLASS_NAME EQUIVALENT equivalent_expression SUBCLASS subclass_header
    (9) defined_class_header -> . CLASS CLASS_NAME EQUIVALENT equivalent_expression class_expression
    (10) defined_class_header -> . CLASS CLASS_NAME EQUIVALENT equivalent_expression SUBCLASS subclass_header class_expression
    (11) defined_class_header -> . CLASS CLASS_NAME SUBCLASS subclass_header EQUIVALENT equivalent_expression
    (12) defined_class_header -> . CLASS CLASS_NAME SUBCLASS subclass_header EQUIVALENT equivalent_expression class_expression

    $end            reduce using rule 1 (ontology -> primitive_class_header .)
    CLASS           shift and go to state 4

    primitive_class_header         shift and go to state 2
    ontology                       shift and go to state 5
    defined_class_header           shift and go to state 3

state 3

    (3) ontology -> defined_class_header .
    (4) ontology -> defined_class_header . ontology
    (1) ontology -> . primitive_class_header
    (2) ontology -> . primitive_class_header ontology
    (3) ontology -> . defined_class_header
    (4) ontology -> . defined_class_header ontology
    (5) primitive_class_header -> . CLASS CLASS_NAME SUBCLASS subclass_header
    (6) primitive_class_header -> . CLASS CLASS_NAME SUBCLASS subclass_header class_expression
    (7) defined_class_header -> . CLASS CLASS_NAME EQUIVALENT equivalent_expression
    (8) defined_class_header -> . CLASS CLASS_NAME EQUIVALENT equivalent_expression SUBCLASS subclass_header
    (9) defined_class_header -> . CLASS CLASS_NAME EQUIVALENT equivalent_expression class_expression
    (10) defined_class_header -> . CLASS CLASS_NAME EQUIVALENT equivalent_expression SUBCLASS subclass_header class_expression
    (11) defined_class_header -> . CLASS CLASS_NAME SUBCLASS subclass_header EQUIVALENT equivalent_expression
    (12) defined_class_header -> . CLASS CLASS_NAME SUBCLASS subclass_header EQUIVALENT equivalent_expression class_expression

    $end            reduce using rule 3 (ontology -> defined_class_header .)
    CLASS           shift and go to state 4

    defined_class_header           shift and go to state 3
    ontology                       shift and go to state 6
    primitive_class_header         shift and go to state 2

state 4

    (5) primitive_class_header -> CLASS . CLASS_NAME SUBCLASS subclass_header
    (6) primitive_class_header -> CLASS . CLASS_NAME SUBCLASS subclass_header class_expression
    (7) defined_class_header -> CLASS . CLASS_NAME EQUIVALENT equivalent_expression
    (8) defined_class_header -> CLASS . CLASS_NAME EQUIVALENT equivalent_expression SUBCLASS subclass_header
    (9) defined_class_header -> CLASS . CLASS_NAME EQUIVALENT equivalent_expression class_expression
    (10) defined_class_header -> CLASS . CLASS_NAME EQUIVALENT equivalent_expression SUBCLASS subclass_header class_expression
    (11) defined_class_header -> CLASS . CLASS_NAME SUBCLASS subclass_header EQUIVALENT equivalent_expression
    (12) defined_class_header -> CLASS . CLASS_NAME SUBCLASS subclass_header EQUIVALENT equivalent_expression class_expression

    CLASS_NAME      shift and go to state 7


state 5

    (2) ontology -> primitive_class_header ontology .

    $end            reduce using rule 2 (ontology -> primitive_class_header ontology .)


state 6

    (4) ontology -> defined_class_header ontology .

    $end            reduce using rule 4 (ontology -> defined_class_header ontology .)


state 7

    (5) primitive_class_header -> CLASS CLASS_NAME . SUBCLASS subclass_header
    (6) primitive_class_header -> CLASS CLASS_NAME . SUBCLASS subclass_header class_expression
    (7) defined_class_header -> CLASS CLASS_NAME . EQUIVALENT equivalent_expression
    (8) defined_class_header -> CLASS CLASS_NAME . EQUIVALENT equivalent_expression SUBCLASS subclass_header
    (9) defined_class_header -> CLASS CLASS_NAME . EQUIVALENT equivalent_expression class_expression
    (10) defined_class_header -> CLASS CLASS_NAME . EQUIVALENT equivalent_expression SUBCLASS subclass_header class_expression
    (11) defined_class_header -> CLASS CLASS_NAME . SUBCLASS subclass_header EQUIVALENT equivalent_expression
    (12) defined_class_header -> CLASS CLASS_NAME . SUBCLASS subclass_header EQUIVALENT equivalent_expression class_expression

    SUBCLASS        shift and go to state 8
    EQUIVALENT      shift and go to state 9


state 8

    (5) primitive_class_header -> CLASS CLASS_NAME SUBCLASS . subclass_header
    (6) primitive_class_header -> CLASS CLASS_NAME SUBCLASS . subclass_header class_expression
    (11) defined_class_header -> CLASS CLASS_NAME SUBCLASS . subclass_header EQUIVALENT equivalent_expression
    (12) defined_class_header -> CLASS CLASS_NAME SUBCLASS . subclass_header EQUIVALENT equivalent_expression class_expression
    (18) subclass_header -> . CLASS_NAME
    (19) subclass_header -> . CLASS_NAME COMMA subclass_expression

    CLASS_NAME      shift and go to state 10

    subclass_header                shift and go to state 11

state 9

    (7) defined_class_header -> CLASS CLASS_NAME EQUIVALENT . equivalent_expression
    (8) defined_class_header -> CLASS CLASS_NAME EQUIVALENT . equivalent_expression SUBCLASS subclass_header
    (9) defined_class_header -> CLASS CLASS_NAME EQUIVALENT . equivalent_expression class_expression
    (10) defined_class_header -> CLASS CLASS_NAME EQUIVALENT . equivalent_expression SUBCLASS subclass_header class_expression
    (16) equivalent_expression -> . CLASS_NAME
    (17) equivalent_expression -> . CLASS_NAME COMMA equivalent_expression

    CLASS_NAME      shift and go to state 12

    equivalent_expression          shift and go to state 13

state 10

    (18) subclass_header -> CLASS_NAME .
    (19) subclass_header -> CLASS_NAME . COMMA subclass_expression

    EQUIVALENT      reduce using rule 18 (subclass_header -> CLASS_NAME .)
    DISJOINT        reduce using rule 18 (subclass_header -> CLASS_NAME .)
    INDIVIDUALS     reduce using rule 18 (subclass_header -> CLASS_NAME .)
    CLASS           reduce using rule 18 (subclass_header -> CLASS_NAME .)
    $end            reduce using rule 18 (subclass_header -> CLASS_NAME .)
    COMMA           shift and go to state 14


state 11

    (5) primitive_class_header -> CLASS CLASS_NAME SUBCLASS subclass_header .
    (6) primitive_class_header -> CLASS CLASS_NAME SUBCLASS subclass_header . class_expression
    (11) defined_class_header -> CLASS CLASS_NAME SUBCLASS subclass_header . EQUIVALENT equivalent_expression
    (12) defined_class_header -> CLASS CLASS_NAME SUBCLASS subclass_header . EQUIVALENT equivalent_expression class_expression
    (13) class_expression -> . DISJOINT disjoint_expression INDIVIDUALS individuals_expression
    (14) class_expression -> . DISJOINT disjoint_expression
    (15) class_expression -> . INDIVIDUALS individuals_expression

    CLASS           reduce using rule 5 (primitive_class_header -> CLASS CLASS_NAME SUBCLASS subclass_header .)
    $end            reduce using rule 5 (primitive_class_header -> CLASS CLASS_NAME SUBCLASS subclass_header .)
    EQUIVALENT      shift and go to state 16
    DISJOINT        shift and go to state 17
    INDIVIDUALS     shift and go to state 18

    class_expression               shift and go to state 15

state 12

    (16) equivalent_expression -> CLASS_NAME .
    (17) equivalent_expression -> CLASS_NAME . COMMA equivalent_expression

    SUBCLASS        reduce using rule 16 (equivalent_expression -> CLASS_NAME .)
    DISJOINT        reduce using rule 16 (equivalent_expression -> CLASS_NAME .)
    INDIVIDUALS     reduce using rule 16 (equivalent_expression -> CLASS_NAME .)
    CLASS           reduce using rule 16 (equivalent_expression -> CLASS_NAME .)
    $end            reduce using rule 16 (equivalent_expression -> CLASS_NAME .)
    COMMA           shift and go to state 19


state 13

    (7) defined_class_header -> CLASS CLASS_NAME EQUIVALENT equivalent_expression .
    (8) defined_class_header -> CLASS CLASS_NAME EQUIVALENT equivalent_expression . SUBCLASS subclass_header
    (9) defined_class_header -> CLASS CLASS_NAME EQUIVALENT equivalent_expression . class_expression
    (10) defined_class_header -> CLASS CLASS_NAME EQUIVALENT equivalent_expression . SUBCLASS subclass_header class_expression
    (13) class_expression -> . DISJOINT disjoint_expression INDIVIDUALS individuals_expression
    (14) class_expression -> . DISJOINT disjoint_expression
    (15) class_expression -> . INDIVIDUALS individuals_expression

    CLASS           reduce using rule 7 (defined_class_header -> CLASS CLASS_NAME EQUIVALENT equivalent_expression .)
    $end            reduce using rule 7 (defined_class_header -> CLASS CLASS_NAME EQUIVALENT equivalent_expression .)
    SUBCLASS        shift and go to state 20
    DISJOINT        shift and go to state 17
    INDIVIDUALS     shift and go to state 18

    class_expression               shift and go to state 21

state 14

    (19) subclass_header -> CLASS_NAME COMMA . subclass_expression
    (20) subclass_expression -> . PROPRIETY SOME CLASS_NAME
    (21) subclass_expression -> . PROPRIETY SOME CLASS_NAME COMMA subclass_expression
    (22) subclass_expression -> . LPAR PROPRIETY SOME CLASS_NAME RPAR
    (23) subclass_expression -> . LPAR PROPRIETY SOME CLASS_NAME RPAR LOGICAL subclass_expression
    (24) subclass_expression -> . PROPRIETY QUANTIFIER NUMBER CLASS_NAME
    (25) subclass_expression -> . PROPRIETY QUANTIFIER NUMBER CLASS_NAME COMMA subclass_expression
    (26) subclass_expression -> . LPAR PROPRIETY QUANTIFIER NUMBER CLASS_NAME RPAR
    (27) subclass_expression -> . LPAR PROPRIETY QUANTIFIER NUMBER CLASS_NAME RPAR LOGICAL subclass_expression
    (28) subclass_expression -> . PROPRIETY ONLY CLASS_NAME
    (29) subclass_expression -> . PROPRIETY ONLY LPAR closure_classes RPAR

    PROPRIETY       shift and go to state 23
    LPAR            shift and go to state 24

    subclass_expression            shift and go to state 22

state 15

    (6) primitive_class_header -> CLASS CLASS_NAME SUBCLASS subclass_header class_expression .

    CLASS           reduce using rule 6 (primitive_class_header -> CLASS CLASS_NAME SUBCLASS subclass_header class_expression .)
    $end            reduce using rule 6 (primitive_class_header -> CLASS CLASS_NAME SUBCLASS subclass_header class_expression .)


state 16

    (11) defined_class_header -> CLASS CLASS_NAME SUBCLASS subclass_header EQUIVALENT . equivalent_expression
    (12) defined_class_header -> CLASS CLASS_NAME SUBCLASS subclass_header EQUIVALENT . equivalent_expression class_expression
    (16) equivalent_expression -> . CLASS_NAME
    (17) equivalent_expression -> . CLASS_NAME COMMA equivalent_expression

    CLASS_NAME      shift and go to state 12

    equivalent_expression          shift and go to state 25

state 17

    (13) class_expression -> DISJOINT . disjoint_expression INDIVIDUALS individuals_expression
    (14) class_expression -> DISJOINT . disjoint_expression
    (33) disjoint_expression -> . CLASS_NAME
    (34) disjoint_expression -> . CLASS_NAME COMMA disjoint_expression

    CLASS_NAME      shift and go to state 27

    disjoint_expression            shift and go to state 26

state 18

    (15) class_expression -> INDIVIDUALS . individuals_expression
    (35) individuals_expression -> . INDIVIDUAL_NAME
    (36) individuals_expression -> . INDIVIDUAL_NAME COMMA individuals_expression

    INDIVIDUAL_NAME shift and go to state 29

    individuals_expression         shift and go to state 28

state 19

    (17) equivalent_expression -> CLASS_NAME COMMA . equivalent_expression
    (16) equivalent_expression -> . CLASS_NAME
    (17) equivalent_expression -> . CLASS_NAME COMMA equivalent_expression

    CLASS_NAME      shift and go to state 12

    equivalent_expression          shift and go to state 30

state 20

    (8) defined_class_header -> CLASS CLASS_NAME EQUIVALENT equivalent_expression SUBCLASS . subclass_header
    (10) defined_class_header -> CLASS CLASS_NAME EQUIVALENT equivalent_expression SUBCLASS . subclass_header class_expression
    (18) subclass_header -> . CLASS_NAME
    (19) subclass_header -> . CLASS_NAME COMMA subclass_expression

    CLASS_NAME      shift and go to state 10

    subclass_header                shift and go to state 31

state 21

    (9) defined_class_header -> CLASS CLASS_NAME EQUIVALENT equivalent_expression class_expression .

    CLASS           reduce using rule 9 (defined_class_header -> CLASS CLASS_NAME EQUIVALENT equivalent_expression class_expression .)
    $end            reduce using rule 9 (defined_class_header -> CLASS CLASS_NAME EQUIVALENT equivalent_expression class_expression .)


state 22

    (19) subclass_header -> CLASS_NAME COMMA subclass_expression .

    EQUIVALENT      reduce using rule 19 (subclass_header -> CLASS_NAME COMMA subclass_expression .)
    DISJOINT        reduce using rule 19 (subclass_header -> CLASS_NAME COMMA subclass_expression .)
    INDIVIDUALS     reduce using rule 19 (subclass_header -> CLASS_NAME COMMA subclass_expression .)
    CLASS           reduce using rule 19 (subclass_header -> CLASS_NAME COMMA subclass_expression .)
    $end            reduce using rule 19 (subclass_header -> CLASS_NAME COMMA subclass_expression .)


state 23

    (20) subclass_expression -> PROPRIETY . SOME CLASS_NAME
    (21) subclass_expression -> PROPRIETY . SOME CLASS_NAME COMMA subclass_expression
    (24) subclass_expression -> PROPRIETY . QUANTIFIER NUMBER CLASS_NAME
    (25) subclass_expression -> PROPRIETY . QUANTIFIER NUMBER CLASS_NAME COMMA subclass_expression
    (28) subclass_expression -> PROPRIETY . ONLY CLASS_NAME
    (29) subclass_expression -> PROPRIETY . ONLY LPAR closure_classes RPAR

    SOME            shift and go to state 32
    QUANTIFIER      shift and go to state 33
    ONLY            shift and go to state 34


state 24

    (22) subclass_expression -> LPAR . PROPRIETY SOME CLASS_NAME RPAR
    (23) subclass_expression -> LPAR . PROPRIETY SOME CLASS_NAME RPAR LOGICAL subclass_expression
    (26) subclass_expression -> LPAR . PROPRIETY QUANTIFIER NUMBER CLASS_NAME RPAR
    (27) subclass_expression -> LPAR . PROPRIETY QUANTIFIER NUMBER CLASS_NAME RPAR LOGICAL subclass_expression

    PROPRIETY       shift and go to state 35


state 25

    (11) defined_class_header -> CLASS CLASS_NAME SUBCLASS subclass_header EQUIVALENT equivalent_expression .
    (12) defined_class_header -> CLASS CLASS_NAME SUBCLASS subclass_header EQUIVALENT equivalent_expression . class_expression
    (13) class_expression -> . DISJOINT disjoint_expression INDIVIDUALS individuals_expression
    (14) class_expression -> . DISJOINT disjoint_expression
    (15) class_expression -> . INDIVIDUALS individuals_expression

    CLASS           reduce using rule 11 (defined_class_header -> CLASS CLASS_NAME SUBCLASS subclass_header EQUIVALENT equivalent_expression .)
    $end            reduce using rule 11 (defined_class_header -> CLASS CLASS_NAME SUBCLASS subclass_header EQUIVALENT equivalent_expression .)
    DISJOINT        shift and go to state 17
    INDIVIDUALS     shift and go to state 18

    class_expression               shift and go to state 36

state 26

    (13) class_expression -> DISJOINT disjoint_expression . INDIVIDUALS individuals_expression
    (14) class_expression -> DISJOINT disjoint_expression .

    INDIVIDUALS     shift and go to state 37
    CLASS           reduce using rule 14 (class_expression -> DISJOINT disjoint_expression .)
    $end            reduce using rule 14 (class_expression -> DISJOINT disjoint_expression .)


state 27

    (33) disjoint_expression -> CLASS_NAME .
    (34) disjoint_expression -> CLASS_NAME . COMMA disjoint_expression

    INDIVIDUALS     reduce using rule 33 (disjoint_expression -> CLASS_NAME .)
    CLASS           reduce using rule 33 (disjoint_expression -> CLASS_NAME .)
    $end            reduce using rule 33 (disjoint_expression -> CLASS_NAME .)
    COMMA           shift and go to state 38


state 28

    (15) class_expression -> INDIVIDUALS individuals_expression .

    CLASS           reduce using rule 15 (class_expression -> INDIVIDUALS individuals_expression .)
    $end            reduce using rule 15 (class_expression -> INDIVIDUALS individuals_expression .)


state 29

    (35) individuals_expression -> INDIVIDUAL_NAME .
    (36) individuals_expression -> INDIVIDUAL_NAME . COMMA individuals_expression

    CLASS           reduce using rule 35 (individuals_expression -> INDIVIDUAL_NAME .)
    $end            reduce using rule 35 (individuals_expression -> INDIVIDUAL_NAME .)
    COMMA           shift and go to state 39


state 30

    (17) equivalent_expression -> CLASS_NAME COMMA equivalent_expression .

    SUBCLASS        reduce using rule 17 (equivalent_expression -> CLASS_NAME COMMA equivalent_expression .)
    DISJOINT        reduce using rule 17 (equivalent_expression -> CLASS_NAME COMMA equivalent_expression .)
    INDIVIDUALS     reduce using rule 17 (equivalent_expression -> CLASS_NAME COMMA equivalent_expression .)
    CLASS           reduce using rule 17 (equivalent_expression -> CLASS_NAME COMMA equivalent_expression .)
    $end            reduce using rule 17 (equivalent_expression -> CLASS_NAME COMMA equivalent_expression .)


state 31

    (8) defined_class_header -> CLASS CLASS_NAME EQUIVALENT equivalent_expression SUBCLASS subclass_header .
    (10) defined_class_header -> CLASS CLASS_NAME EQUIVALENT equivalent_expression SUBCLASS subclass_header . class_expression
    (13) class_expression -> . DISJOINT disjoint_expression INDIVIDUALS individuals_expression
    (14) class_expression -> . DISJOINT disjoint_expression
    (15) class_expression -> . INDIVIDUALS individuals_expression

    CLASS           reduce using rule 8 (defined_class_header -> CLASS CLASS_NAME EQUIVALENT equivalent_expression SUBCLASS subclass_header .)
    $end            reduce using rule 8 (defined_class_header -> CLASS CLASS_NAME EQUIVALENT equivalent_expression SUBCLASS subclass_header .)
    DISJOINT        shift and go to state 17
    INDIVIDUALS     shift and go to state 18

    class_expression               shift and go to state 40

state 32

    (20) subclass_expression -> PROPRIETY SOME . CLASS_NAME
    (21) subclass_expression -> PROPRIETY SOME . CLASS_NAME COMMA subclass_expression

    CLASS_NAME      shift and go to state 41


state 33

    (24) subclass_expression -> PROPRIETY QUANTIFIER . NUMBER CLASS_NAME
    (25) subclass_expression -> PROPRIETY QUANTIFIER . NUMBER CLASS_NAME COMMA subclass_expression

    NUMBER          shift and go to state 42


state 34

    (28) subclass_expression -> PROPRIETY ONLY . CLASS_NAME
    (29) subclass_expression -> PROPRIETY ONLY . LPAR closure_classes RPAR

    CLASS_NAME      shift and go to state 43
    LPAR            shift and go to state 44


state 35

    (22) subclass_expression -> LPAR PROPRIETY . SOME CLASS_NAME RPAR
    (23) subclass_expression -> LPAR PROPRIETY . SOME CLASS_NAME RPAR LOGICAL subclass_expression
    (26) subclass_expression -> LPAR PROPRIETY . QUANTIFIER NUMBER CLASS_NAME RPAR
    (27) subclass_expression -> LPAR PROPRIETY . QUANTIFIER NUMBER CLASS_NAME RPAR LOGICAL subclass_expression

    SOME            shift and go to state 45
    QUANTIFIER      shift and go to state 46


state 36

    (12) defined_class_header -> CLASS CLASS_NAME SUBCLASS subclass_header EQUIVALENT equivalent_expression class_expression .

    CLASS           reduce using rule 12 (defined_class_header -> CLASS CLASS_NAME SUBCLASS subclass_header EQUIVALENT equivalent_expression class_expression .)
    $end            reduce using rule 12 (defined_class_header -> CLASS CLASS_NAME SUBCLASS subclass_header EQUIVALENT equivalent_expression class_expression .)


state 37

    (13) class_expression -> DISJOINT disjoint_expression INDIVIDUALS . individuals_expression
    (35) individuals_expression -> . INDIVIDUAL_NAME
    (36) individuals_expression -> . INDIVIDUAL_NAME COMMA individuals_expression

    INDIVIDUAL_NAME shift and go to state 29

    individuals_expression         shift and go to state 47

state 38

    (34) disjoint_expression -> CLASS_NAME COMMA . disjoint_expression
    (33) disjoint_expression -> . CLASS_NAME
    (34) disjoint_expression -> . CLASS_NAME COMMA disjoint_expression

    CLASS_NAME      shift and go to state 27

    disjoint_expression            shift and go to state 48

state 39

    (36) individuals_expression -> INDIVIDUAL_NAME COMMA . individuals_expression
    (35) individuals_expression -> . INDIVIDUAL_NAME
    (36) individuals_expression -> . INDIVIDUAL_NAME COMMA individuals_expression

    INDIVIDUAL_NAME shift and go to state 29

    individuals_expression         shift and go to state 49

state 40

    (10) defined_class_header -> CLASS CLASS_NAME EQUIVALENT equivalent_expression SUBCLASS subclass_header class_expression .

    CLASS           reduce using rule 10 (defined_class_header -> CLASS CLASS_NAME EQUIVALENT equivalent_expression SUBCLASS subclass_header class_expression .)
    $end            reduce using rule 10 (defined_class_header -> CLASS CLASS_NAME EQUIVALENT equivalent_expression SUBCLASS subclass_header class_expression .)


state 41

    (20) subclass_expression -> PROPRIETY SOME CLASS_NAME .
    (21) subclass_expression -> PROPRIETY SOME CLASS_NAME . COMMA subclass_expression

    EQUIVALENT      reduce using rule 20 (subclass_expression -> PROPRIETY SOME CLASS_NAME .)
    DISJOINT        reduce using rule 20 (subclass_expression -> PROPRIETY SOME CLASS_NAME .)
    INDIVIDUALS     reduce using rule 20 (subclass_expression -> PROPRIETY SOME CLASS_NAME .)
    CLASS           reduce using rule 20 (subclass_expression -> PROPRIETY SOME CLASS_NAME .)
    $end            reduce using rule 20 (subclass_expression -> PROPRIETY SOME CLASS_NAME .)
    COMMA           shift and go to state 50


state 42

    (24) subclass_expression -> PROPRIETY QUANTIFIER NUMBER . CLASS_NAME
    (25) subclass_expression -> PROPRIETY QUANTIFIER NUMBER . CLASS_NAME COMMA subclass_expression

    CLASS_NAME      shift and go to state 51


state 43

    (28) subclass_expression -> PROPRIETY ONLY CLASS_NAME .

    EQUIVALENT      reduce using rule 28 (subclass_expression -> PROPRIETY ONLY CLASS_NAME .)
    DISJOINT        reduce using rule 28 (subclass_expression -> PROPRIETY ONLY CLASS_NAME .)
    INDIVIDUALS     reduce using rule 28 (subclass_expression -> PROPRIETY ONLY CLASS_NAME .)
    CLASS           reduce using rule 28 (subclass_expression -> PROPRIETY ONLY CLASS_NAME .)
    $end            reduce using rule 28 (subclass_expression -> PROPRIETY ONLY CLASS_NAME .)


state 44

    (29) subclass_expression -> PROPRIETY ONLY LPAR . closure_classes RPAR
    (30) closure_classes -> . CLASS_NAME
    (31) closure_classes -> . CLASS_NAME LOGICAL closure_classes
    (32) closure_classes -> . CLASS_NAME COMMA closure_classes

    CLASS_NAME      shift and go to state 53

    closure_classes                shift and go to state 52

state 45

    (22) subclass_expression -> LPAR PROPRIETY SOME . CLASS_NAME RPAR
    (23) subclass_expression -> LPAR PROPRIETY SOME . CLASS_NAME RPAR LOGICAL subclass_expression

    CLASS_NAME      shift and go to state 54


state 46

    (26) subclass_expression -> LPAR PROPRIETY QUANTIFIER . NUMBER CLASS_NAME RPAR
    (27) subclass_expression -> LPAR PROPRIETY QUANTIFIER . NUMBER CLASS_NAME RPAR LOGICAL subclass_expression

    NUMBER          shift and go to state 55


state 47

    (13) class_expression -> DISJOINT disjoint_expression INDIVIDUALS individuals_expression .

    CLASS           reduce using rule 13 (class_expression -> DISJOINT disjoint_expression INDIVIDUALS individuals_expression .)
    $end            reduce using rule 13 (class_expression -> DISJOINT disjoint_expression INDIVIDUALS individuals_expression .)


state 48

    (34) disjoint_expression -> CLASS_NAME COMMA disjoint_expression .

    INDIVIDUALS     reduce using rule 34 (disjoint_expression -> CLASS_NAME COMMA disjoint_expression .)
    CLASS           reduce using rule 34 (disjoint_expression -> CLASS_NAME COMMA disjoint_expression .)
    $end            reduce using rule 34 (disjoint_expression -> CLASS_NAME COMMA disjoint_expression .)


state 49

    (36) individuals_expression -> INDIVIDUAL_NAME COMMA individuals_expression .

    CLASS           reduce using rule 36 (individuals_expression -> INDIVIDUAL_NAME COMMA individuals_expression .)
    $end            reduce using rule 36 (individuals_expression -> INDIVIDUAL_NAME COMMA individuals_expression .)


state 50

    (21) subclass_expression -> PROPRIETY SOME CLASS_NAME COMMA . subclass_expression
    (20) subclass_expression -> . PROPRIETY SOME CLASS_NAME
    (21) subclass_expression -> . PROPRIETY SOME CLASS_NAME COMMA subclass_expression
    (22) subclass_expression -> . LPAR PROPRIETY SOME CLASS_NAME RPAR
    (23) subclass_expression -> . LPAR PROPRIETY SOME CLASS_NAME RPAR LOGICAL subclass_expression
    (24) subclass_expression -> . PROPRIETY QUANTIFIER NUMBER CLASS_NAME
    (25) subclass_expression -> . PROPRIETY QUANTIFIER NUMBER CLASS_NAME COMMA subclass_expression
    (26) subclass_expression -> . LPAR PROPRIETY QUANTIFIER NUMBER CLASS_NAME RPAR
    (27) subclass_expression -> . LPAR PROPRIETY QUANTIFIER NUMBER CLASS_NAME RPAR LOGICAL subclass_expression
    (28) subclass_expression -> . PROPRIETY ONLY CLASS_NAME
    (29) subclass_expression -> . PROPRIETY ONLY LPAR closure_classes RPAR

    PROPRIETY       shift and go to state 23
    LPAR            shift and go to state 24

    subclass_expression            shift and go to state 56

state 51

    (24) subclass_expression -> PROPRIETY QUANTIFIER NUMBER CLASS_NAME .
    (25) subclass_expression -> PROPRIETY QUANTIFIER NUMBER CLASS_NAME . COMMA subclass_expression

    EQUIVALENT      reduce using rule 24 (subclass_expression -> PROPRIETY QUANTIFIER NUMBER CLASS_NAME .)
    DISJOINT        reduce using rule 24 (subclass_expression -> PROPRIETY QUANTIFIER NUMBER CLASS_NAME .)
    INDIVIDUALS     reduce using rule 24 (subclass_expression -> PROPRIETY QUANTIFIER NUMBER CLASS_NAME .)
    CLASS           reduce using rule 24 (subclass_expression -> PROPRIETY QUANTIFIER NUMBER CLASS_NAME .)
    $end            reduce using rule 24 (subclass_expression -> PROPRIETY QUANTIFIER NUMBER CLASS_NAME .)
    COMMA           shift and go to state 57


state 52

    (29) subclass_expression -> PROPRIETY ONLY LPAR closure_classes . RPAR

    RPAR            shift and go to state 58


state 53

    (30) closure_classes -> CLASS_NAME .
    (31) closure_classes -> CLASS_NAME . LOGICAL closure_classes
    (32) closure_classes -> CLASS_NAME . COMMA closure_classes

    RPAR            reduce using rule 30 (closure_classes -> CLASS_NAME .)
    LOGICAL         shift and go to state 59
    COMMA           shift and go to state 60


state 54

    (22) subclass_expression -> LPAR PROPRIETY SOME CLASS_NAME . RPAR
    (23) subclass_expression -> LPAR PROPRIETY SOME CLASS_NAME . RPAR LOGICAL subclass_expression

    RPAR            shift and go to state 61


state 55

    (26) subclass_expression -> LPAR PROPRIETY QUANTIFIER NUMBER . CLASS_NAME RPAR
    (27) subclass_expression -> LPAR PROPRIETY QUANTIFIER NUMBER . CLASS_NAME RPAR LOGICAL subclass_expression

    CLASS_NAME      shift and go to state 62


state 56

    (21) subclass_expression -> PROPRIETY SOME CLASS_NAME COMMA subclass_expression .

    EQUIVALENT      reduce using rule 21 (subclass_expression -> PROPRIETY SOME CLASS_NAME COMMA subclass_expression .)
    DISJOINT        reduce using rule 21 (subclass_expression -> PROPRIETY SOME CLASS_NAME COMMA subclass_expression .)
    INDIVIDUALS     reduce using rule 21 (subclass_expression -> PROPRIETY SOME CLASS_NAME COMMA subclass_expression .)
    CLASS           reduce using rule 21 (subclass_expression -> PROPRIETY SOME CLASS_NAME COMMA subclass_expression .)
    $end            reduce using rule 21 (subclass_expression -> PROPRIETY SOME CLASS_NAME COMMA subclass_expression .)


state 57

    (25) subclass_expression -> PROPRIETY QUANTIFIER NUMBER CLASS_NAME COMMA . subclass_expression
    (20) subclass_expression -> . PROPRIETY SOME CLASS_NAME
    (21) subclass_expression -> . PROPRIETY SOME CLASS_NAME COMMA subclass_expression
    (22) subclass_expression -> . LPAR PROPRIETY SOME CLASS_NAME RPAR
    (23) subclass_expression -> . LPAR PROPRIETY SOME CLASS_NAME RPAR LOGICAL subclass_expression
    (24) subclass_expression -> . PROPRIETY QUANTIFIER NUMBER CLASS_NAME
    (25) subclass_expression -> . PROPRIETY QUANTIFIER NUMBER CLASS_NAME COMMA subclass_expression
    (26) subclass_expression -> . LPAR PROPRIETY QUANTIFIER NUMBER CLASS_NAME RPAR
    (27) subclass_expression -> . LPAR PROPRIETY QUANTIFIER NUMBER CLASS_NAME RPAR LOGICAL subclass_expression
    (28) subclass_expression -> . PROPRIETY ONLY CLASS_NAME
    (29) subclass_expression -> . PROPRIETY ONLY LPAR closure_classes RPAR

    PROPRIETY       shift and go to state 23
    LPAR            shift and go to state 24

    subclass_expression            shift and go to state 63

state 58

    (29) subclass_expression -> PROPRIETY ONLY LPAR closure_classes RPAR .

    EQUIVALENT      reduce using rule 29 (subclass_expression -> PROPRIETY ONLY LPAR closure_classes RPAR .)
    DISJOINT        reduce using rule 29 (subclass_expression -> PROPRIETY ONLY LPAR closure_classes RPAR .)
    INDIVIDUALS     reduce using rule 29 (subclass_expression -> PROPRIETY ONLY LPAR closure_classes RPAR .)
    CLASS           reduce using rule 29 (subclass_expression -> PROPRIETY ONLY LPAR closure_classes RPAR .)
    $end            reduce using rule 29 (subclass_expression -> PROPRIETY ONLY LPAR closure_classes RPAR .)


state 59

    (31) closure_classes -> CLASS_NAME LOGICAL . closure_classes
    (30) closure_classes -> . CLASS_NAME
    (31) closure_classes -> . CLASS_NAME LOGICAL closure_classes
    (32) closure_classes -> . CLASS_NAME COMMA closure_classes

    CLASS_NAME      shift and go to state 53

    closure_classes                shift and go to state 64

state 60

    (32) closure_classes -> CLASS_NAME COMMA . closure_classes
    (30) closure_classes -> . CLASS_NAME
    (31) closure_classes -> . CLASS_NAME LOGICAL closure_classes
    (32) closure_classes -> . CLASS_NAME COMMA closure_classes

    CLASS_NAME      shift and go to state 53

    closure_classes                shift and go to state 65

state 61

    (22) subclass_expression -> LPAR PROPRIETY SOME CLASS_NAME RPAR .
    (23) subclass_expression -> LPAR PROPRIETY SOME CLASS_NAME RPAR . LOGICAL subclass_expression

    EQUIVALENT      reduce using rule 22 (subclass_expression -> LPAR PROPRIETY SOME CLASS_NAME RPAR .)
    DISJOINT        reduce using rule 22 (subclass_expression -> LPAR PROPRIETY SOME CLASS_NAME RPAR .)
    INDIVIDUALS     reduce using rule 22 (subclass_expression -> LPAR PROPRIETY SOME CLASS_NAME RPAR .)
    CLASS           reduce using rule 22 (subclass_expression -> LPAR PROPRIETY SOME CLASS_NAME RPAR .)
    $end            reduce using rule 22 (subclass_expression -> LPAR PROPRIETY SOME CLASS_NAME RPAR .)
    LOGICAL         shift and go to state 66


state 62

    (26) subclass_expression -> LPAR PROPRIETY QUANTIFIER NUMBER CLASS_NAME . RPAR
    (27) subclass_expression -> LPAR PROPRIETY QUANTIFIER NUMBER CLASS_NAME . RPAR LOGICAL subclass_expression

    RPAR            shift and go to state 67


state 63

    (25) subclass_expression -> PROPRIETY QUANTIFIER NUMBER CLASS_NAME COMMA subclass_expression .

    EQUIVALENT      reduce using rule 25 (subclass_expression -> PROPRIETY QUANTIFIER NUMBER CLASS_NAME COMMA subclass_expression .)
    DISJOINT        reduce using rule 25 (subclass_expression -> PROPRIETY QUANTIFIER NUMBER CLASS_NAME COMMA subclass_expression .)
    INDIVIDUALS     reduce using rule 25 (subclass_expression -> PROPRIETY QUANTIFIER NUMBER CLASS_NAME COMMA subclass_expression .)
    CLASS           reduce using rule 25 (subclass_expression -> PROPRIETY QUANTIFIER NUMBER CLASS_NAME COMMA subclass_expression .)
    $end            reduce using rule 25 (subclass_expression -> PROPRIETY QUANTIFIER NUMBER CLASS_NAME COMMA subclass_expression .)


state 64

    (31) closure_classes -> CLASS_NAME LOGICAL closure_classes .

    RPAR            reduce using rule 31 (closure_classes -> CLASS_NAME LOGICAL closure_classes .)


state 65

    (32) closure_classes -> CLASS_NAME COMMA closure_classes .

    RPAR            reduce using rule 32 (closure_classes -> CLASS_NAME COMMA closure_classes .)


state 66

    (23) subclass_expression -> LPAR PROPRIETY SOME CLASS_NAME RPAR LOGICAL . subclass_expression
    (20) subclass_expression -> . PROPRIETY SOME CLASS_NAME
    (21) subclass_expression -> . PROPRIETY SOME CLASS_NAME COMMA subclass_expression
    (22) subclass_expression -> . LPAR PROPRIETY SOME CLASS_NAME RPAR
    (23) subclass_expression -> . LPAR PROPRIETY SOME CLASS_NAME RPAR LOGICAL subclass_expression
    (24) subclass_expression -> . PROPRIETY QUANTIFIER NUMBER CLASS_NAME
    (25) subclass_expression -> . PROPRIETY QUANTIFIER NUMBER CLASS_NAME COMMA subclass_expression
    (26) subclass_expression -> . LPAR PROPRIETY QUANTIFIER NUMBER CLASS_NAME RPAR
    (27) subclass_expression -> . LPAR PROPRIETY QUANTIFIER NUMBER CLASS_NAME RPAR LOGICAL subclass_expression
    (28) subclass_expression -> . PROPRIETY ONLY CLASS_NAME
    (29) subclass_expression -> . PROPRIETY ONLY LPAR closure_classes RPAR

    PROPRIETY       shift and go to state 23
    LPAR            shift and go to state 24

    subclass_expression            shift and go to state 68

state 67

    (26) subclass_expression -> LPAR PROPRIETY QUANTIFIER NUMBER CLASS_NAME RPAR .
    (27) subclass_expression -> LPAR PROPRIETY QUANTIFIER NUMBER CLASS_NAME RPAR . LOGICAL subclass_expression

    EQUIVALENT      reduce using rule 26 (subclass_expression -> LPAR PROPRIETY QUANTIFIER NUMBER CLASS_NAME RPAR .)
    DISJOINT        reduce using rule 26 (subclass_expression -> LPAR PROPRIETY QUANTIFIER NUMBER CLASS_NAME RPAR .)
    INDIVIDUALS     reduce using rule 26 (subclass_expression -> LPAR PROPRIETY QUANTIFIER NUMBER CLASS_NAME RPAR .)
    CLASS           reduce using rule 26 (subclass_expression -> LPAR PROPRIETY QUANTIFIER NUMBER CLASS_NAME RPAR .)
    $end            reduce using rule 26 (subclass_expression -> LPAR PROPRIETY QUANTIFIER NUMBER CLASS_NAME RPAR .)
    LOGICAL         shift and go to state 69


state 68

    (23) subclass_expression -> LPAR PROPRIETY SOME CLASS_NAME RPAR LOGICAL subclass_expression .

    EQUIVALENT      reduce using rule 23 (subclass_expression -> LPAR PROPRIETY SOME CLASS_NAME RPAR LOGICAL subclass_expression .)
    DISJOINT        reduce using rule 23 (subclass_expression -> LPAR PROPRIETY SOME CLASS_NAME RPAR LOGICAL subclass_expression .)
    INDIVIDUALS     reduce using rule 23 (subclass_expression -> LPAR PROPRIETY SOME CLASS_NAME RPAR LOGICAL subclass_expression .)
    CLASS           reduce using rule 23 (subclass_expression -> LPAR PROPRIETY SOME CLASS_NAME RPAR LOGICAL subclass_expression .)
    $end            reduce using rule 23 (subclass_expression -> LPAR PROPRIETY SOME CLASS_NAME RPAR LOGICAL subclass_expression .)


state 69

    (27) subclass_expression -> LPAR PROPRIETY QUANTIFIER NUMBER CLASS_NAME RPAR LOGICAL . subclass_expression
    (20) subclass_expression -> . PROPRIETY SOME CLASS_NAME
    (21) subclass_expression -> . PROPRIETY SOME CLASS_NAME COMMA subclass_expression
    (22) subclass_expression -> . LPAR PROPRIETY SOME CLASS_NAME RPAR
    (23) subclass_expression -> . LPAR PROPRIETY SOME CLASS_NAME RPAR LOGICAL subclass_expression
    (24) subclass_expression -> . PROPRIETY QUANTIFIER NUMBER CLASS_NAME
    (25) subclass_expression -> . PROPRIETY QUANTIFIER NUMBER CLASS_NAME COMMA subclass_expression
    (26) subclass_expression -> . LPAR PROPRIETY QUANTIFIER NUMBER CLASS_NAME RPAR
    (27) subclass_expression -> . LPAR PROPRIETY QUANTIFIER NUMBER CLASS_NAME RPAR LOGICAL subclass_expression
    (28) subclass_expression -> . PROPRIETY ONLY CLASS_NAME
    (29) subclass_expression -> . PROPRIETY ONLY LPAR closure_classes RPAR

    PROPRIETY       shift and go to state 23
    LPAR            shift and go to state 24

    subclass_expression            shift and go to state 70

state 70

    (27) subclass_expression -> LPAR PROPRIETY QUANTIFIER NUMBER CLASS_NAME RPAR LOGICAL subclass_expression .

    EQUIVALENT      reduce using rule 27 (subclass_expression -> LPAR PROPRIETY QUANTIFIER NUMBER CLASS_NAME RPAR LOGICAL subclass_expression .)
    DISJOINT        reduce using rule 27 (subclass_expression -> LPAR PROPRIETY QUANTIFIER NUMBER CLASS_NAME RPAR LOGICAL subclass_expression .)
    INDIVIDUALS     reduce using rule 27 (subclass_expression -> LPAR PROPRIETY QUANTIFIER NUMBER CLASS_NAME RPAR LOGICAL subclass_expression .)
    CLASS           reduce using rule 27 (subclass_expression -> LPAR PROPRIETY QUANTIFIER NUMBER CLASS_NAME RPAR LOGICAL subclass_expression .)
    $end            reduce using rule 27 (subclass_expression -> LPAR PROPRIETY QUANTIFIER NUMBER CLASS_NAME RPAR LOGICAL subclass_expression .)

