
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ontologyALL BEQ BIG CLASS CLASS_NAME COMMA DISJOINT EQUIVALENT ID INDIVIDUALS INDIVIDUAL_NAME LBRACKET LCURLY LEQ LESS LOGICAL LPAR NAMESPACE NUMBER ONLY PROPRIETY QUANTIFIER RBRACKET RCURLY RPAR SOME SUBCLASSontology : primitive_class_header\n                    | primitive_class_header ontologyprimitive_class_header : CLASS CLASS_NAME SUBCLASS subclass_header primitive_class_expression\n                                  | CLASS CLASS_NAME SUBCLASS primitive_class_expression subclass_headerprimitive_class_expression : DISJOINT disjoint_expression primitive_class_expression\n                                      | INDIVIDUALS individuals_expression primitive_class_expression\n                                      | DISJOINT disjoint_expression\n                                      | INDIVIDUALS individuals_expressionsubclass_header : CLASS_NAME\n                           | CLASS_NAME COMMA subclass_expressionsubclass_expression : PROPRIETY SOME CLASS_NAME\n                               | PROPRIETY ONLY CLASS_NAME\n                               | subclass_expression LOGICAL subclass_expression\n                               | PROPRIETY QUANTIFIER NUMBER CLASS_NAME\n                               | LPAR subclass_expression RPAR\n                               | subclass_expression COMMA subclass_expressiondisjoint_expression : CLASS_NAME\n                               | disjoint_expression COMMA disjoint_expressionindividuals_expression : INDIVIDUAL_NAME'
    
_lr_action_items = {'CLASS':([0,2,7,13,14,15,16,17,18,19,22,24,31,32,33,34,35,37,38,],[3,3,-9,-3,-4,-7,-17,-8,-19,-10,-5,-6,-18,-16,-13,-11,-12,-15,-14,]),'$end':([1,2,4,7,13,14,15,16,17,18,19,22,24,31,32,33,34,35,37,38,],[0,-1,-2,-9,-3,-4,-7,-17,-8,-19,-10,-5,-6,-18,-16,-13,-11,-12,-15,-14,]),'CLASS_NAME':([3,6,9,10,15,16,17,18,22,23,24,27,28,31,36,],[5,7,7,16,-7,-17,-8,-19,-5,16,-6,34,35,-18,38,]),'SUBCLASS':([5,],[6,]),'DISJOINT':([6,7,8,15,16,17,18,19,31,32,33,34,35,37,38,],[10,-9,10,10,-17,10,-19,-10,-18,-16,-13,-11,-12,-15,-14,]),'INDIVIDUALS':([6,7,8,15,16,17,18,19,31,32,33,34,35,37,38,],[11,-9,11,11,-17,11,-19,-10,-18,-16,-13,-11,-12,-15,-14,]),'COMMA':([7,15,16,19,30,31,32,33,34,35,37,38,],[12,23,-17,25,25,23,25,25,-11,-12,-15,-14,]),'INDIVIDUAL_NAME':([11,],[18,]),'PROPRIETY':([12,21,25,26,],[20,20,20,20,]),'LPAR':([12,21,25,26,],[21,21,21,21,]),'LOGICAL':([19,30,32,33,34,35,37,38,],[26,26,26,26,-11,-12,-15,-14,]),'SOME':([20,],[27,]),'ONLY':([20,],[28,]),'QUANTIFIER':([20,],[29,]),'NUMBER':([29,],[36,]),'RPAR':([30,32,33,34,35,37,38,],[37,-16,-13,-11,-12,-15,-14,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'ontology':([0,2,],[1,4,]),'primitive_class_header':([0,2,],[2,2,]),'subclass_header':([6,9,],[8,14,]),'primitive_class_expression':([6,8,15,17,],[9,13,22,24,]),'disjoint_expression':([10,23,],[15,31,]),'individuals_expression':([11,],[17,]),'subclass_expression':([12,21,25,26,],[19,30,32,33,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> ontology","S'",1,None,None,None),
  ('ontology -> primitive_class_header','ontology',1,'p_ontology','SyntacticAnalyser.py',13),
  ('ontology -> primitive_class_header ontology','ontology',2,'p_ontology','SyntacticAnalyser.py',14),
  ('primitive_class_header -> CLASS CLASS_NAME SUBCLASS subclass_header primitive_class_expression','primitive_class_header',5,'p_primitive_class_header','SyntacticAnalyser.py',19),
  ('primitive_class_header -> CLASS CLASS_NAME SUBCLASS primitive_class_expression subclass_header','primitive_class_header',5,'p_primitive_class_header','SyntacticAnalyser.py',20),
  ('primitive_class_expression -> DISJOINT disjoint_expression primitive_class_expression','primitive_class_expression',3,'p_primitive_class_expression','SyntacticAnalyser.py',24),
  ('primitive_class_expression -> INDIVIDUALS individuals_expression primitive_class_expression','primitive_class_expression',3,'p_primitive_class_expression','SyntacticAnalyser.py',25),
  ('primitive_class_expression -> DISJOINT disjoint_expression','primitive_class_expression',2,'p_primitive_class_expression','SyntacticAnalyser.py',26),
  ('primitive_class_expression -> INDIVIDUALS individuals_expression','primitive_class_expression',2,'p_primitive_class_expression','SyntacticAnalyser.py',27),
  ('subclass_header -> CLASS_NAME','subclass_header',1,'p_subclass_header','SyntacticAnalyser.py',32),
  ('subclass_header -> CLASS_NAME COMMA subclass_expression','subclass_header',3,'p_subclass_header','SyntacticAnalyser.py',33),
  ('subclass_expression -> PROPRIETY SOME CLASS_NAME','subclass_expression',3,'p_subclass_expression','SyntacticAnalyser.py',37),
  ('subclass_expression -> PROPRIETY ONLY CLASS_NAME','subclass_expression',3,'p_subclass_expression','SyntacticAnalyser.py',38),
  ('subclass_expression -> subclass_expression LOGICAL subclass_expression','subclass_expression',3,'p_subclass_expression','SyntacticAnalyser.py',39),
  ('subclass_expression -> PROPRIETY QUANTIFIER NUMBER CLASS_NAME','subclass_expression',4,'p_subclass_expression','SyntacticAnalyser.py',40),
  ('subclass_expression -> LPAR subclass_expression RPAR','subclass_expression',3,'p_subclass_expression','SyntacticAnalyser.py',41),
  ('subclass_expression -> subclass_expression COMMA subclass_expression','subclass_expression',3,'p_subclass_expression','SyntacticAnalyser.py',42),
  ('disjoint_expression -> CLASS_NAME','disjoint_expression',1,'p_disjoint_expression','SyntacticAnalyser.py',46),
  ('disjoint_expression -> disjoint_expression COMMA disjoint_expression','disjoint_expression',3,'p_disjoint_expression','SyntacticAnalyser.py',47),
  ('individuals_expression -> INDIVIDUAL_NAME','individuals_expression',1,'p_individuals_expression','SyntacticAnalyser.py',52),
]
