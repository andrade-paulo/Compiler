
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ontologyALL BEQ BIG CLASS CLASS_NAME COMMA DISJOINT EQUIVALENT ID INDIVIDUALS INDIVIDUAL_NAME LBRACKET LCURLY LEQ LESS LOGICAL LPAR NAMESPACE NUMBER ONLY PROPRIETY QUANTIFIER RBRACKET RCURLY RPAR SOME SUBCLASSontology : primitive_class_header\n                    | primitive_class_header ontology\n                    | defined_class_header\n                    | defined_class_header ontologyprimitive_class_header : CLASS CLASS_NAME SUBCLASS subclass_header \n                                  | CLASS CLASS_NAME SUBCLASS subclass_header class_expressiondefined_class_header : CLASS CLASS_NAME EQUIVALENT equivalent_expression\n                                | CLASS CLASS_NAME EQUIVALENT equivalent_expression SUBCLASS subclass_header\n                                | CLASS CLASS_NAME EQUIVALENT equivalent_expression class_expression\n                                | CLASS CLASS_NAME EQUIVALENT equivalent_expression SUBCLASS subclass_header class_expressiondefined_class_header : CLASS CLASS_NAME SUBCLASS subclass_header EQUIVALENT equivalent_expression\n                                | CLASS CLASS_NAME SUBCLASS subclass_header EQUIVALENT equivalent_expression class_expressionclass_expression : DISJOINT disjoint_expression INDIVIDUALS individuals_expressionclass_expression : DISJOINT disjoint_expression\n                            | INDIVIDUALS individuals_expressionequivalent_expression : CLASS_NAME\n                                 | CLASS_NAME COMMA equivalent_expression\n                                 | CLASS_NAME LOGICAL LPAR property_expression RPARsubclass_header : CLASS_NAME\n                           | CLASS_NAME COMMA property_expressionproperty_expression : PROPRIETY SOME CLASS_NAME \n                               | PROPRIETY SOME CLASS_NAME COMMA property_expression\n                               | PROPRIETY SOME LPAR property_expression RPAR\n                               | LPAR PROPRIETY SOME CLASS_NAME RPAR\n                               | LPAR PROPRIETY SOME CLASS_NAME RPAR LOGICAL property_expression\n                               | LPAR PROPRIETY SOME LPAR property_expression RPAR RPAR\n\n                               | PROPRIETY QUANTIFIER CLASS_NAME\n                               | PROPRIETY QUANTIFIER NUMBER CLASS_NAME\n                               | PROPRIETY QUANTIFIER NUMBER CLASS_NAME COMMA property_expression\n                               | LPAR PROPRIETY QUANTIFIER NUMBER CLASS_NAME RPAR\n                               | LPAR PROPRIETY QUANTIFIER NUMBER CLASS_NAME RPAR LOGICAL property_expression\n                               \n                               | PROPRIETY ONLY CLASS_NAME\n                               | PROPRIETY ONLY LPAR closure_classes RPARclosure_classes : CLASS_NAME\n                           | CLASS_NAME LOGICAL closure_classes\n                           | CLASS_NAME COMMA closure_classesdisjoint_expression : CLASS_NAME\n                               | CLASS_NAME COMMA disjoint_expressionindividuals_expression : INDIVIDUAL_NAME\n                                  | INDIVIDUAL_NAME COMMA individuals_expression'
    
_lr_action_items = {'CLASS':([0,2,3,10,11,12,13,15,22,23,26,27,28,29,30,31,33,38,43,44,46,48,52,53,54,55,58,64,65,67,71,73,78,79,80,82,],[4,4,4,-19,-5,-16,-7,-6,-9,-20,-11,-14,-37,-15,-39,-17,-8,-12,-10,-21,-27,-32,-13,-38,-40,-18,-28,-22,-23,-33,-24,-29,-30,-26,-25,-31,]),'$end':([1,2,3,5,6,10,11,12,13,15,22,23,26,27,28,29,30,31,33,38,43,44,46,48,52,53,54,55,58,64,65,67,71,73,78,79,80,82,],[0,-1,-3,-2,-4,-19,-5,-16,-7,-6,-9,-20,-11,-14,-37,-15,-39,-17,-8,-12,-10,-21,-27,-32,-13,-38,-40,-18,-28,-22,-23,-33,-24,-29,-30,-26,-25,-31,]),'CLASS_NAME':([4,8,9,16,17,19,21,34,35,36,40,47,49,50,63,68,69,],[7,10,12,12,28,12,10,44,46,48,28,58,60,62,72,60,60,]),'SUBCLASS':([7,12,13,31,55,],[8,-16,21,-17,-18,]),'EQUIVALENT':([7,10,11,23,44,46,48,58,64,65,67,71,73,78,79,80,82,],[9,-19,16,-20,-21,-27,-32,-28,-22,-23,-33,-24,-29,-30,-26,-25,-31,]),'DISJOINT':([10,11,12,13,23,26,31,33,44,46,48,55,58,64,65,67,71,73,78,79,80,82,],[-19,17,-16,17,-20,17,-17,17,-21,-27,-32,-18,-28,-22,-23,-33,-24,-29,-30,-26,-25,-31,]),'INDIVIDUALS':([10,11,12,13,23,26,27,28,31,33,44,46,48,53,55,58,64,65,67,71,73,78,79,80,82,],[-19,18,-16,18,-20,18,39,-37,-17,18,-21,-27,-32,-38,-18,-28,-22,-23,-33,-24,-29,-30,-26,-25,-31,]),'COMMA':([10,12,28,30,44,58,60,],[14,19,40,41,56,66,69,]),'LOGICAL':([12,60,71,78,],[20,68,77,81,]),'PROPRIETY':([14,25,32,45,56,61,66,77,81,],[24,37,24,24,24,24,24,24,24,]),'LPAR':([14,20,32,34,36,45,50,56,61,66,77,81,],[25,32,25,45,49,25,61,25,25,25,25,25,]),'INDIVIDUAL_NAME':([18,39,41,],[30,30,30,]),'SOME':([24,37,],[34,50,]),'QUANTIFIER':([24,37,],[35,51,]),'ONLY':([24,],[36,]),'NUMBER':([35,51,],[47,63,]),'RPAR':([42,44,46,48,57,58,59,60,62,64,65,67,70,71,72,73,74,75,76,78,79,80,82,],[55,-21,-27,-32,65,-28,67,-34,71,-22,-23,-33,76,-24,78,-29,-35,-36,79,-30,-26,-25,-31,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'ontology':([0,2,3,],[1,5,6,]),'primitive_class_header':([0,2,3,],[2,2,2,]),'defined_class_header':([0,2,3,],[3,3,3,]),'subclass_header':([8,21,],[11,33,]),'equivalent_expression':([9,16,19,],[13,26,31,]),'class_expression':([11,13,26,33,],[15,22,38,43,]),'property_expression':([14,32,45,56,61,66,77,81,],[23,42,57,64,70,73,80,82,]),'disjoint_expression':([17,40,],[27,53,]),'individuals_expression':([18,39,41,],[29,52,54,]),'closure_classes':([49,68,69,],[59,74,75,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> ontology","S'",1,None,None,None),
  ('ontology -> primitive_class_header','ontology',1,'p_ontology','SyntacticAnalyser.py',26),
  ('ontology -> primitive_class_header ontology','ontology',2,'p_ontology','SyntacticAnalyser.py',27),
  ('ontology -> defined_class_header','ontology',1,'p_ontology','SyntacticAnalyser.py',28),
  ('ontology -> defined_class_header ontology','ontology',2,'p_ontology','SyntacticAnalyser.py',29),
  ('primitive_class_header -> CLASS CLASS_NAME SUBCLASS subclass_header','primitive_class_header',4,'p_primitive_class_header','SyntacticAnalyser.py',33),
  ('primitive_class_header -> CLASS CLASS_NAME SUBCLASS subclass_header class_expression','primitive_class_header',5,'p_primitive_class_header','SyntacticAnalyser.py',34),
  ('defined_class_header -> CLASS CLASS_NAME EQUIVALENT equivalent_expression','defined_class_header',4,'p_defined_class_header','SyntacticAnalyser.py',46),
  ('defined_class_header -> CLASS CLASS_NAME EQUIVALENT equivalent_expression SUBCLASS subclass_header','defined_class_header',6,'p_defined_class_header','SyntacticAnalyser.py',47),
  ('defined_class_header -> CLASS CLASS_NAME EQUIVALENT equivalent_expression class_expression','defined_class_header',5,'p_defined_class_header','SyntacticAnalyser.py',48),
  ('defined_class_header -> CLASS CLASS_NAME EQUIVALENT equivalent_expression SUBCLASS subclass_header class_expression','defined_class_header',7,'p_defined_class_header','SyntacticAnalyser.py',49),
  ('defined_class_header -> CLASS CLASS_NAME SUBCLASS subclass_header EQUIVALENT equivalent_expression','defined_class_header',6,'p_defined_class_header_error','SyntacticAnalyser.py',61),
  ('defined_class_header -> CLASS CLASS_NAME SUBCLASS subclass_header EQUIVALENT equivalent_expression class_expression','defined_class_header',7,'p_defined_class_header_error','SyntacticAnalyser.py',62),
  ('class_expression -> DISJOINT disjoint_expression INDIVIDUALS individuals_expression','class_expression',4,'p_class_expression','SyntacticAnalyser.py',67),
  ('class_expression -> DISJOINT disjoint_expression','class_expression',2,'p_class_expression_error','SyntacticAnalyser.py',70),
  ('class_expression -> INDIVIDUALS individuals_expression','class_expression',2,'p_class_expression_error','SyntacticAnalyser.py',71),
  ('equivalent_expression -> CLASS_NAME','equivalent_expression',1,'p_equivalent_expression','SyntacticAnalyser.py',76),
  ('equivalent_expression -> CLASS_NAME COMMA equivalent_expression','equivalent_expression',3,'p_equivalent_expression','SyntacticAnalyser.py',77),
  ('equivalent_expression -> CLASS_NAME LOGICAL LPAR property_expression RPAR','equivalent_expression',5,'p_equivalent_expression','SyntacticAnalyser.py',78),
  ('subclass_header -> CLASS_NAME','subclass_header',1,'p_subclass_header','SyntacticAnalyser.py',87),
  ('subclass_header -> CLASS_NAME COMMA property_expression','subclass_header',3,'p_subclass_header','SyntacticAnalyser.py',88),
  ('property_expression -> PROPRIETY SOME CLASS_NAME','property_expression',3,'p_property_expression','SyntacticAnalyser.py',105),
  ('property_expression -> PROPRIETY SOME CLASS_NAME COMMA property_expression','property_expression',5,'p_property_expression','SyntacticAnalyser.py',106),
  ('property_expression -> PROPRIETY SOME LPAR property_expression RPAR','property_expression',5,'p_property_expression','SyntacticAnalyser.py',107),
  ('property_expression -> LPAR PROPRIETY SOME CLASS_NAME RPAR','property_expression',5,'p_property_expression','SyntacticAnalyser.py',108),
  ('property_expression -> LPAR PROPRIETY SOME CLASS_NAME RPAR LOGICAL property_expression','property_expression',7,'p_property_expression','SyntacticAnalyser.py',109),
  ('property_expression -> LPAR PROPRIETY SOME LPAR property_expression RPAR RPAR','property_expression',7,'p_property_expression','SyntacticAnalyser.py',110),
  ('property_expression -> PROPRIETY QUANTIFIER CLASS_NAME','property_expression',3,'p_property_expression','SyntacticAnalyser.py',112),
  ('property_expression -> PROPRIETY QUANTIFIER NUMBER CLASS_NAME','property_expression',4,'p_property_expression','SyntacticAnalyser.py',113),
  ('property_expression -> PROPRIETY QUANTIFIER NUMBER CLASS_NAME COMMA property_expression','property_expression',6,'p_property_expression','SyntacticAnalyser.py',114),
  ('property_expression -> LPAR PROPRIETY QUANTIFIER NUMBER CLASS_NAME RPAR','property_expression',6,'p_property_expression','SyntacticAnalyser.py',115),
  ('property_expression -> LPAR PROPRIETY QUANTIFIER NUMBER CLASS_NAME RPAR LOGICAL property_expression','property_expression',8,'p_property_expression','SyntacticAnalyser.py',116),
  ('property_expression -> PROPRIETY ONLY CLASS_NAME','property_expression',3,'p_property_expression','SyntacticAnalyser.py',118),
  ('property_expression -> PROPRIETY ONLY LPAR closure_classes RPAR','property_expression',5,'p_property_expression','SyntacticAnalyser.py',119),
  ('closure_classes -> CLASS_NAME','closure_classes',1,'p_closure_classes','SyntacticAnalyser.py',138),
  ('closure_classes -> CLASS_NAME LOGICAL closure_classes','closure_classes',3,'p_closure_classes','SyntacticAnalyser.py',139),
  ('closure_classes -> CLASS_NAME COMMA closure_classes','closure_classes',3,'p_closure_classes','SyntacticAnalyser.py',140),
  ('disjoint_expression -> CLASS_NAME','disjoint_expression',1,'p_disjoint_expression','SyntacticAnalyser.py',152),
  ('disjoint_expression -> CLASS_NAME COMMA disjoint_expression','disjoint_expression',3,'p_disjoint_expression','SyntacticAnalyser.py',153),
  ('individuals_expression -> INDIVIDUAL_NAME','individuals_expression',1,'p_individuals_expression','SyntacticAnalyser.py',162),
  ('individuals_expression -> INDIVIDUAL_NAME COMMA individuals_expression','individuals_expression',3,'p_individuals_expression','SyntacticAnalyser.py',163),
]
